/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianNiftyLinksPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {};
var ObsidianNiftyLinksPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("loading plugin");
    await this.loadSettings();
    this.addRibbonIcon("link", "Nifty Links", () => {
      let activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (activeView) {
        let editor = activeView.editor;
        this.urlToIframe(editor);
      }
    });
    this.addCommand({
      id: "create-nifty-links",
      name: "Create Nifty Link",
      editorCheckCallback: (checking, editor) => {
        if (!checking) {
          this.urlToIframe(editor);
        }
        return true;
      }
    });
  }
  onunload() {
    console.log("unloading plugin");
  }
  isUrl(text) {
    const urlRegex = new RegExp("^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$");
    return urlRegex.test(text);
  }
  async urlToIframe(editor) {
    let selectedText = editor.somethingSelected() ? editor.getSelection().trim() : false;
    if (selectedText && this.isUrl(selectedText)) {
      const url = selectedText;
      try {
        const response = await requestUrl(`http://iframely.server.crestify.com/iframely?url=${url}`);
        const data = response.json;
        let imageLink = data.links.find((value) => value.type.startsWith("image") && value.rel.includes("twitter"));
        imageLink = imageLink ? imageLink.href : "";
        let cardTextStyle = imageLink ? "" : ' style="width: 100%;"';
        let imageContainerHTML = imageLink ? `    <div class="nifty-link-image-container">
                <div class="nifty-link-image" style="background-image: url('${imageLink}')">
                </div>
            </div>` : "";
        let iconLink = data.links.find((value) => value.type.startsWith("image") && value.rel.includes("icon"));
        iconLink = iconLink ? iconLink.href : "";
        editor.replaceSelection(`
  <div class="nifty-link-card-container">
	<a class="nifty-link-card" href="${url}" target="_blank">
		<div class="nifty-link-card-text"${cardTextStyle}>
			<div class="nifty-link-card-title">${(data.meta.title || "").replace(/\s{3,}/g, " ").trim()}</div>
			<div class="nifty-link-card-description">${(data.meta.description || "").replace(/\s{3,}/g, " ").trim()}</div>
			<div class="nifty-link-href">
			<img class="nifty-link-icon" src="${iconLink}">
				${url}
			</div>
		</div>
		${imageContainerHTML}
	</a>
  </div>
  
  `);
      } catch (error) {
        console.error(error);
      }
    } else {
      new obsidian.Notice("Select a URL to convert to nifty link.");
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHtcclxuXHRBcHAsXHJcblx0RWRpdG9yLFxyXG5cdE1hcmtkb3duVmlldyxcclxuXHRCdXR0b25Db21wb25lbnQsXHJcblx0TW9kYWwsXHJcblx0Tm90aWNlLFxyXG5cdFBsdWdpbixcclxuXHRQbHVnaW5TZXR0aW5nVGFiLFxyXG5cdFNldHRpbmcsXHJcbiAgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuICBcclxuICBpbnRlcmZhY2UgT2JzaWRpYW5OaWZ0eUxpbmtzUGx1Z2luU2V0dGluZ3MgeyB9XHJcbiAgXHJcbiAgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogT2JzaWRpYW5OaWZ0eUxpbmtzUGx1Z2luU2V0dGluZ3MgPSB7fTtcclxuICBcclxuICBleHBvcnQgZGVmYXVsdCBjbGFzcyBPYnNpZGlhbk5pZnR5TGlua3NQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG5cdHNldHRpbmdzOiBPYnNpZGlhbk5pZnR5TGlua3NQbHVnaW47XHJcbiAgXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdCAgY29uc29sZS5sb2coXCJsb2FkaW5nIHBsdWdpblwiKTtcclxuICBcclxuXHQgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcbiAgXHJcblx0ICB0aGlzLmFkZFJpYmJvbkljb24oXCJsaW5rXCIsIFwiTmlmdHkgTGlua3NcIiwgKCkgPT4ge1xyXG5cdFx0bGV0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xyXG5cdFx0aWYgKGFjdGl2ZVZpZXcpIHtcclxuXHRcdCAgbGV0IGVkaXRvciA9IGFjdGl2ZVZpZXcuZWRpdG9yO1xyXG5cdFx0ICB0aGlzLnVybFRvSWZyYW1lKGVkaXRvcik7XHJcblx0XHR9XHJcblx0ICB9KTtcclxuICBcclxuXHQgIHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRpZDogXCJjcmVhdGUtbmlmdHktbGlua3NcIixcclxuXHRcdG5hbWU6IFwiQ3JlYXRlIE5pZnR5IExpbmtcIixcclxuXHRcdGVkaXRvckNoZWNrQ2FsbGJhY2s6IChjaGVja2luZzogYm9vbGVhbiwgZWRpdG9yOiBFZGl0b3IpID0+IHtcclxuXHRcdCAgaWYgKCFjaGVja2luZykge1xyXG5cdFx0XHR0aGlzLnVybFRvSWZyYW1lKGVkaXRvcik7XHJcblx0XHQgIH1cclxuXHRcdCAgcmV0dXJuIHRydWU7XHJcblx0XHR9LFxyXG5cdCAgfSk7XHJcblx0fVxyXG4gIFxyXG5cdG9udW5sb2FkKCkge1xyXG5cdFx0ICBjb25zb2xlLmxvZyhcInVubG9hZGluZyBwbHVnaW5cIik7XHJcblx0ICB9XHJcblx0ICBpc1VybCh0ZXh0KSB7XHJcblx0XHRjb25zdCB1cmxSZWdleCA9IG5ldyBSZWdFeHAoXCJeKGh0dHA6XFxcXC9cXFxcL3d3d1xcXFwufGh0dHBzOlxcXFwvXFxcXC93d3dcXFxcLnxodHRwOlxcXFwvXFxcXC98aHR0cHM6XFxcXC9cXFxcLyk/W2EtejAtOV0rKFtcXFxcLS5dezF9W2EtejAtOV0rKSpcXFxcLlthLXpdezIsNX0oOlswLTldezEsNX0pPyhcXFxcLy4qKT8kXCIpO1xyXG5cdFx0cmV0dXJuIHVybFJlZ2V4LnRlc3QodGV4dCk7XHJcblx0ICB9XHJcbiAgXHJcblx0ICBhc3luYyB1cmxUb0lmcmFtZShlZGl0b3IpIHtcclxuXHRcdGxldCBzZWxlY3RlZFRleHQgPSBlZGl0b3Iuc29tZXRoaW5nU2VsZWN0ZWQoKVxyXG5cdFx0XHQ/IGVkaXRvci5nZXRTZWxlY3Rpb24oKS50cmltKClcclxuXHRcdFx0OiBmYWxzZTtcclxuXHRcdGlmIChzZWxlY3RlZFRleHQgJiYgdGhpcy5pc1VybChzZWxlY3RlZFRleHQpKSB7XHJcblx0XHRcdGNvbnN0IHVybCA9IHNlbGVjdGVkVGV4dDtcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3RVcmwoYGh0dHA6Ly9pZnJhbWVseS5zZXJ2ZXIuY3Jlc3RpZnkuY29tL2lmcmFtZWx5P3VybD0ke3VybH1gKTtcclxuXHRcdFx0XHRjb25zdCBkYXRhID0gcmVzcG9uc2UuanNvbjtcclxuXHRcdFx0XHRsZXQgaW1hZ2VMaW5rID0gZGF0YS5saW5rcy5maW5kKCh2YWx1ZSkgPT4gdmFsdWUudHlwZS5zdGFydHNXaXRoKFwiaW1hZ2VcIikgJiYgdmFsdWUucmVsLmluY2x1ZGVzKCd0d2l0dGVyJykpO1xyXG5cdFx0XHRcdGltYWdlTGluayA9IGltYWdlTGluayA/IGltYWdlTGluay5ocmVmIDogJyc7XHJcblx0XHRcdFx0bGV0IGNhcmRUZXh0U3R5bGUgPSBpbWFnZUxpbmsgPyBcIlwiIDogJyBzdHlsZT1cIndpZHRoOiAxMDAlO1wiJztcclxuXHRcdFx0XHRsZXQgaW1hZ2VDb250YWluZXJIVE1MID0gaW1hZ2VMaW5rID8gYCAgICA8ZGl2IGNsYXNzPVwibmlmdHktbGluay1pbWFnZS1jb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJuaWZ0eS1saW5rLWltYWdlXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJyR7aW1hZ2VMaW5rfScpXCI+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+YCA6ICcnO1xyXG5cdFx0XHRcdGxldCBpY29uTGluayA9IGRhdGEubGlua3MuZmluZCgodmFsdWUpID0+IHZhbHVlLnR5cGUuc3RhcnRzV2l0aChcImltYWdlXCIpICYmIHZhbHVlLnJlbC5pbmNsdWRlcygnaWNvbicpKTtcclxuXHRcdFx0XHRpY29uTGluayA9IGljb25MaW5rID8gaWNvbkxpbmsuaHJlZiA6ICcnO1xyXG5cdFx0XHRcdGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKGBcclxuICA8ZGl2IGNsYXNzPVwibmlmdHktbGluay1jYXJkLWNvbnRhaW5lclwiPlxyXG5cdDxhIGNsYXNzPVwibmlmdHktbGluay1jYXJkXCIgaHJlZj1cIiR7dXJsfVwiIHRhcmdldD1cIl9ibGFua1wiPlxyXG5cdFx0PGRpdiBjbGFzcz1cIm5pZnR5LWxpbmstY2FyZC10ZXh0XCIke2NhcmRUZXh0U3R5bGV9PlxyXG5cdFx0XHQ8ZGl2IGNsYXNzPVwibmlmdHktbGluay1jYXJkLXRpdGxlXCI+JHsoZGF0YS5tZXRhLnRpdGxlIHx8IFwiXCIpLnJlcGxhY2UoL1xcc3szLH0vZywgJyAnKS50cmltKCl9PC9kaXY+XHJcblx0XHRcdDxkaXYgY2xhc3M9XCJuaWZ0eS1saW5rLWNhcmQtZGVzY3JpcHRpb25cIj4keyhkYXRhLm1ldGEuZGVzY3JpcHRpb24gfHwgXCJcIikucmVwbGFjZSgvXFxzezMsfS9nLCAnICcpLnRyaW0oKX08L2Rpdj5cclxuXHRcdFx0PGRpdiBjbGFzcz1cIm5pZnR5LWxpbmstaHJlZlwiPlxyXG5cdFx0XHQ8aW1nIGNsYXNzPVwibmlmdHktbGluay1pY29uXCIgc3JjPVwiJHtpY29uTGlua31cIj5cclxuXHRcdFx0XHQke3VybH1cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQ8L2Rpdj5cclxuXHRcdCR7aW1hZ2VDb250YWluZXJIVE1MfVxyXG5cdDwvYT5cclxuICA8L2Rpdj5cclxuICBcclxuICBgKTtcclxuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdG5ldyBvYnNpZGlhbi5Ob3RpY2UoXCJTZWxlY3QgYSBVUkwgdG8gY29udmVydCB0byBuaWZ0eSBsaW5rLlwiKTtcclxuXHRcdH1cclxuXHR9XHJcbiAgXHJcblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG5cdCAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XHJcblx0fVxyXG4gIFxyXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuXHQgIGF3YWl0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
